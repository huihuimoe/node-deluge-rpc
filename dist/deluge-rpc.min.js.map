{"version":3,"file":"deluge-rpc.min.js","sources":["../lib/index.js"],"sourcesContent":["const stream = require('stream')\r\nconst axios = require('axios')\r\nconst FormData = require('form-data')\r\nconst isNode = typeof stream !== 'undefined'\r\n\r\nmodule.exports = class DelugeRPC {\r\n  /**\r\n   * @constructor\r\n   * @param {string} delugeRpcBaseUrl deluge-web rpc url (without json)\r\n   * @param {string} rpcPassword deluge-web password\r\n   */\r\n  constructor (delugeRpcBaseUrl, rpcPassword) {\r\n    this.msgId = 0\r\n    this.cookie = ''\r\n    if (delugeRpcBaseUrl[delugeRpcBaseUrl.length - 1] !== '/') {\r\n      delugeRpcBaseUrl += '/'\r\n    }\r\n    this.baseUrl = delugeRpcBaseUrl\r\n    this.pass = rpcPassword\r\n  }\r\n\r\n  /**\r\n   * make request\r\n   * @param {string} method\r\n   * @param {Array<any>} params\r\n   * @returns {Promise<Response>}\r\n   */\r\n  async _makeCall (method, params = []) {\r\n    if (this.msgId === 1024) {\r\n      this.msgId = 0\r\n    }\r\n    const headers = {\r\n      'Content-Type': 'application/json'\r\n    }\r\n    if (isNode) {\r\n      headers['Cookie'] = this.cookie\r\n    }\r\n    return axios.request({\r\n      url: this.baseUrl + 'json',\r\n      method: 'post',\r\n      data: {\r\n        method,\r\n        params,\r\n        id: this.msgId++\r\n      },\r\n      withCredentials: true,\r\n      headers\r\n    })\r\n  }\r\n\r\n  /**\r\n   * authorize\r\n   * @returns {Promise<boolean>}\r\n   */\r\n  async auth () {\r\n    const {data: {result: status}} = await this._makeCall('auth.check_session')\r\n    if (status) {\r\n      return true\r\n    }\r\n    const {data, headers} = await this._makeCall('auth.login', [this.pass])\r\n    if (!data.result) {\r\n      throw new Error('Auth failed, does the password valided?')\r\n    }\r\n    this.cookie = headers['set-cookie'][0].split(';')[0]\r\n    return true\r\n  }\r\n\r\n  /**\r\n   * call rpc method\r\n   * @param {string} method\r\n   * @param {Array<any>} params\r\n   * @returns {Promise<any>}\r\n   */\r\n  async call (method, params = []) {\r\n    return this._makeCall(method, params).then(response => {\r\n      const data = response.data\r\n      if (data.error) {\r\n        throw data.error\r\n      }\r\n      return data.result\r\n    })\r\n  }\r\n\r\n  /**\r\n   * connect to a host\r\n   * @param {number | string} host index or the id of host\r\n   * @returns {Promise<null>}\r\n   */\r\n  async connect (host = 0) {\r\n    if (typeof host === 'number') {\r\n      const hosts = await this.call('web.get_hosts')\r\n      host = hosts[host][0]\r\n    }\r\n    const result = await this.call('web.connect', [host])\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * get status of all torrents\r\n   * @returns {Promise<any>}\r\n   */\r\n  async getTorrentRecord () {\r\n    await this.auth()\r\n    return this.call('web.update_ui', [\r\n      [\r\n        'distributed_copies',\r\n        'download_payload_rate',\r\n        'eta',\r\n        'is_auto_managed',\r\n        'max_download_speed',\r\n        'max_upload_speed',\r\n        'name',\r\n        'num_peers',\r\n        'num_seeds',\r\n        'progress',\r\n        'queue',\r\n        'ratio',\r\n        'save_path',\r\n        'seeds_peers_ratio',\r\n        'state',\r\n        'time_added',\r\n        'total_done',\r\n        'total_peers',\r\n        'total_seeds',\r\n        'total_uploaded',\r\n        'total_wanted',\r\n        'tracker_host',\r\n        'upload_payload_rate'\r\n      ], {}\r\n    ])\r\n  }\r\n\r\n  /**\r\n   * add a torrent\r\n   * @param {string | URL | Buffer | Promise<Buffer> | ReadableStream | File | Blob} torrent - path or url or file\r\n   * @param {string | DelugeTorrentConfig} config - torrent options or download path\r\n   * @returns {boolean}\r\n   */\r\n  async addTorrent (torrent, config = {}) {\r\n    await this.auth()\r\n    if (torrent instanceof Promise) {\r\n      // fsPromises to Buffer\r\n      torrent = await torrent\r\n    }\r\n\r\n    let form\r\n    // node env\r\n    if (isNode &&\r\n      (torrent instanceof Buffer || torrent instanceof stream.Readable)\r\n    ) {\r\n      form = new FormData()\r\n      form.append('file', torrent)\r\n    }\r\n    // browser env\r\n    if (!isNode &&\r\n      (torrent instanceof File || torrent instanceof Blob)\r\n    ) {\r\n      form = new FormData()\r\n      form.append('file', torrent, torrent.name)\r\n    }\r\n    // upload torrent\r\n    if (form) {\r\n      const headers = {\r\n        ...form.getHeaders()\r\n      }\r\n      if (isNode) {\r\n        headers['Cookie'] = this.cookie\r\n      }\r\n      const result = await axios.request({\r\n        url: this.delugeRpcBaseUrl + 'upload',\r\n        method: 'post',\r\n        data: form,\r\n        withCredentials: true,\r\n        headers\r\n      })\r\n      torrent = result['files'][0]\r\n    }\r\n\r\n    if (typeof config === 'string') {\r\n      config = {\r\n        download_location: config\r\n      }\r\n    }\r\n\r\n    // a URL\r\n    let isURL = false\r\n    try {\r\n      isURL = !!new URL(torrent)\r\n    } catch (e) {}\r\n    if (isURL) {\r\n      torrent = await this.call('web.download_torrent_from_url', [torrent, config.cookie])\r\n      delete config.cookie\r\n    }\r\n\r\n    config = {\r\n      path: torrent,\r\n      options: {\r\n        file_priorities: [],\r\n        add_paused: false,\r\n        compact_allocation: true,\r\n        max_connections: -1,\r\n        max_download_speed: -1,\r\n        max_upload_slots: -1,\r\n        max_upload_speed: -1,\r\n        prioritize_first_last_pieces: false,\r\n        ...config\r\n      }\r\n    }\r\n\r\n    const result = await this.call('web.add_torrents', [[config]])\r\n    return result\r\n  }\r\n}\r\n"],"names":["isNode","stream","[object Object]","delugeRpcBaseUrl","rpcPassword","this","msgId","cookie","length","baseUrl","pass","method","params","headers","Content-Type","axios","request","url","data","id","withCredentials","result","status","_makeCall","Error","split","then","response","error","host","call","auth","torrent","config","form","Promise","Buffer","Readable","FormData","append","File","Blob","name","getHeaders","download_location","isURL","URL","e","path","options","file_priorities","add_paused","compact_allocation","max_connections","max_download_speed","max_upload_slots","max_upload_speed","prioritize_first_last_pieces"],"mappings":"qbAGA,MAAMA,OAA2B,IAAXC,eAQpBC,YAAaC,EAAkBC,GAC7BC,KAAKC,MAAQ,EACbD,KAAKE,OAAS,GACwC,MAAlDJ,EAAiBA,EAAiBK,OAAS,KAC7CL,GAAoB,KAEtBE,KAAKI,QAAUN,EACfE,KAAKK,KAAON,EASdF,gBAAiBS,EAAQC,MACJ,OAAfP,KAAKC,QACPD,KAAKC,MAAQ,GAEf,MAAMO,GACJC,eAAgB,oBAKlB,OAHId,IACFa,EAAgB,OAAIR,KAAKE,QAEpBQ,EAAMC,SACXC,IAAKZ,KAAKI,QAAU,OACpBE,OAAQ,OACRO,MACEP,OAAAA,EACAC,OAAAA,EACAO,GAAId,KAAKC,SAEXc,iBAAiB,EACjBP,QAAAA,IAQJX,aACE,MAAOgB,MAAOG,OAAQC,UAAiBjB,KAAKkB,UAAU,sBACtD,GAAID,EACF,OAAO,EAET,MAAMJ,KAACA,EAAIL,QAAEA,SAAiBR,KAAKkB,UAAU,cAAelB,KAAKK,OACjE,IAAKQ,EAAKG,OACR,MAAM,IAAIG,MAAM,2CAGlB,OADAnB,KAAKE,OAASM,EAAQ,cAAc,GAAGY,MAAM,KAAK,IAC3C,EASTvB,WAAYS,EAAQC,MAClB,OAAOP,KAAKkB,UAAUZ,EAAQC,GAAQc,KAAKC,IACzC,MAAMT,EAAOS,EAAST,KACtB,GAAIA,EAAKU,MACP,MAAMV,EAAKU,MAEb,OAAOV,EAAKG,SAShBnB,cAAe2B,EAAO,GAMpB,MALoB,iBAATA,IAETA,SADoBxB,KAAKyB,KAAK,kBACjBD,GAAM,UAEAxB,KAAKyB,KAAK,eAAgBD,IAQjD3B,yBAEE,aADMG,KAAK0B,OACJ1B,KAAKyB,KAAK,kBAEb,qBACA,wBACA,MACA,kBACA,qBACA,mBACA,OACA,YACA,YACA,WACA,QACA,QACA,YACA,oBACA,QACA,aACA,aACA,cACA,cACA,iBACA,eACA,eACA,4BAWN5B,iBAAkB8B,EAASC,MAOzB,IAAIC,EAgBJ,SAtBM7B,KAAK0B,OACPC,aAAmBG,UAErBH,QAAgBA,GAKdhC,IACDgC,aAAmBI,QAAUJ,aAAmB/B,EAAOoC,YAExDH,EAAO,IAAII,GACNC,OAAO,OAAQP,IAGjBhC,IACFgC,aAAmBQ,MAAQR,aAAmBS,QAE/CP,EAAO,IAAII,GACNC,OAAO,OAAQP,EAASA,EAAQU,MAGnCR,EAAM,CACR,MAAMrB,MACDqB,EAAKS,cAEN3C,IACFa,EAAgB,OAAIR,KAAKE,QAS3ByB,SAPqBjB,EAAMC,SACzBC,IAAKZ,KAAKF,iBAAmB,SAC7BQ,OAAQ,OACRO,KAAMgB,EACNd,iBAAiB,EACjBP,QAAAA,KAEsB,MAAE,GAGN,iBAAXoB,IACTA,GACEW,kBAAmBX,IAKvB,IAAIY,GAAQ,EACZ,IACEA,IAAU,IAAIC,IAAId,GAClB,MAAOe,IAsBT,OArBIF,IACFb,QAAgB3B,KAAKyB,KAAK,iCAAkCE,EAASC,EAAO1B,gBACrE0B,EAAO1B,QAGhB0B,GACEe,KAAMhB,EACNiB,SACEC,mBACAC,YAAY,EACZC,oBAAoB,EACpBC,iBAAkB,EAClBC,oBAAqB,EACrBC,kBAAmB,EACnBC,kBAAmB,EACnBC,8BAA8B,KAC3BxB,UAIc5B,KAAKyB,KAAK,qBAAsBG"}